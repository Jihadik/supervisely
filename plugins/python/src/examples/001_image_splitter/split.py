import supervisely_lib as sly
from supervisely_lib.geometry.sliding_windows_fuzzy import SlidingWindowsFuzzy, SlidingWindowBorderStrategy

WORKSPACE_ID = int('%%WORKSPACE_ID%%')
src_project_name = '%%IN_PROJECT_NAME%%'
dst_project_name = '%%RESULT_PROJECT_NAME%%'

window_height = int('%%WINDOW_HEIGHT_IN_PIXELS:100%%')
window_width = int('%%WINDOW_WIDTH_IN_PIXELS:100%%')
overlap_y = int('%%OVERLAP_HEIGHT_IN_PIXELS:0%%')
overlap_x = int('%%OVERLAP_WIDTH_IN_PIXELS:0%%')

SW_BORDER_STRATEGY = '%%SW_BORDER_STRATEGY:change_size%%'

#coordinates correspondance
#hwd
#yxz

# for debug
# SW_BORDER_STRATEGY = str(SlidingWindowBorderStrategy.CHANGE_SIZE)
# WORKSPACE_ID = 27
# src_project_name = 'tutorial_project'
# dst_project_name = 'change_size2'
# window_height = 800
# window_width = 800
# overlap_y = 0
# overlap_x = 0

BATCH_SIZE = 1  # because there are many images can be produced from a single one

api = sly.Api.from_env()

workspace = api.workspace.get_info_by_id(WORKSPACE_ID)
if workspace is None:
    raise RuntimeError("Workspace with ID={!r} not found".format(WORKSPACE_ID))

src_project = api.project.get_info_by_name(workspace.id, src_project_name)
if src_project is None:
    raise RuntimeError("Project with name={!r} not found".format(src_project_name))

meta_json = api.project.get_meta(src_project.id)
meta = sly.ProjectMeta.from_json(meta_json)

dst_project = api.project.create(workspace.id, dst_project_name, change_name_if_conflict=True)
if dst_project.name != dst_project_name:
    sly.logger.warn("Project with name={!r} already exists. Project is saved with autogenerated name {!r}"
                    .format(dst_project_name, dst_project.name))
api.project.update_meta(dst_project.id, meta.to_json())

progress = sly.Progress("Splitting images", api.project.get_images_count(src_project.id))
for src_dataset in api.dataset.get_list(src_project.id):
    dst_dataset = api.dataset.create(dst_project.id, src_dataset.name)
    images = api.image.get_list(src_dataset.id)
    for batch in sly.batched(images, batch_size=BATCH_SIZE):
        image_ids = [image_info.id for image_info in batch] # debug [281152]
        image_names = [image_info.name for image_info in batch]
        ann_infos = api.annotation.download_batch(src_dataset.id, image_ids)
        images = api.image.download_nps(src_dataset.id, image_ids)

        for ann_info, image, image_name in zip(ann_infos, images, image_names):
            window_index = 0
            ann = sly.Annotation.from_json(ann_info.annotation, meta)

            crop_names = []
            crop_images = []
            crop_anns = []
            slider = SlidingWindowsFuzzy([window_height, window_width], [overlap_y, overlap_x], SW_BORDER_STRATEGY)
            for window_index, window in enumerate(slider.get(image.shape[:2])):
                crop_name = "{}___{:04d}_{}_{}{}".format(sly.fs.get_file_name(image_name),
                                                       window_index,
                                                       window.top,
                                                       window.left,
                                                       sly.fs.get_file_ext(image_name))
                crop_names.append(crop_name)

                crop_ann = ann.relative_crop(window)
                crop_anns.append(crop_ann)

                if SW_BORDER_STRATEGY == str(SlidingWindowBorderStrategy.ADD_PADDING):
                    crop_image = sly.image.crop_with_padding(image, window)
                else:
                    crop_image = sly.image.crop(image, window)
                crop_images.append(crop_image)

            dst_image_infos = api.image.upload_nps(dst_dataset.id, crop_names, crop_images)
            dst_image_ids = [img_info.id for img_info in dst_image_infos]
            api.annotation.upload_anns(dst_image_ids, crop_anns)

        progress.iters_done_report(len(batch))

sly.logger.info('PROJECT_CREATED', extra={'event_type': sly.EventType.PROJECT_CREATED, 'project_id': dst_project.id})